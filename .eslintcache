[{"/var/www/bar-chart-race/src/index.js":"1","/var/www/bar-chart-race/src/reportWebVitals.js":"2","/var/www/bar-chart-race/src/App.js":"3","/var/www/bar-chart-race/src/components/Loading.js":"4","/var/www/bar-chart-race/src/helper/data.js":"5","/var/www/bar-chart-race/src/components/BarchartRace.js":"6"},{"size":500,"mtime":1615281494463,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1615281494463,"results":"9","hashOfConfig":"8"},{"size":1747,"mtime":1615289842906,"results":"10","hashOfConfig":"8"},{"size":697,"mtime":1615281494463,"results":"11","hashOfConfig":"8"},{"size":365,"mtime":1615282409081,"results":"12","hashOfConfig":"8"},{"size":20636,"mtime":1615289842906,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1fjdlri",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},"/var/www/bar-chart-race/src/index.js",[],["28","29"],"/var/www/bar-chart-race/src/reportWebVitals.js",[],"/var/www/bar-chart-race/src/App.js",[],"/var/www/bar-chart-race/src/components/Loading.js",[],"/var/www/bar-chart-race/src/helper/data.js",[],"/var/www/bar-chart-race/src/components/BarchartRace.js",["30","31","32"],"import * as d3 from 'd3';\nimport { sliderBottom } from 'd3-simple-slider';\nimport React, { useEffect} from 'react'\n\nexport default function BarchartRace({ data, eventData }) {\n  d3.select('.barchartdiv').selectAll('svg').remove()\n\n  useEffect(() => {\n    //remove the useless zero value out of the dataset\n    data = data.filter((d) => d.partij !== '0');\n    // console.log(data);\n    // console.log(eventData);\n\n    // The data from the \"day dashboard\" maintained by FTM\n    let partijen = new Set(data.map((d) => d.partij));\n    // Unique political party names\n    let partijNames = d3.group(data, (d) => d.partij);\n\n    // Spending per unique date per political party\n    // d.midden = average cumulative value\n    // d.datum = date\n    // d.partij = political party name\n    const datevalues = Array.from(\n      d3.rollup(\n        data,\n        ([d]) => d.midden,\n        (d) => d.datum,\n        (d) => d.partij\n      )\n    )\n      .map(([date, data]) => [new Date(date), data])\n      .sort(([a], [b]) => d3.ascending(a, b));\n\n    // Display settings\n    //source: https://stackoverflow.com/questions/1248081/how-to-get-the-browser-viewport-dimensions\n    const width = Math.max(\n      document.documentElement.clientWidth || 0,\n      window.innerWidth || 0\n    );\n    const margin = { top: 16, right: 100, bottom: 65, left: 5 };\n    const barSize = 37;\n\n    // Maximum number of bars\n    const n = 13;\n\n    // Speed between dates displayed (used for keyframes)\n    // The higher the number, the slower the total duration of the animation\n    const k = 1;\n\n    // Duration between keyframes (in milliseconds)\n    const duration = 200;\n\n    const height = margin.top + barSize * n + margin.bottom;\n\n    // Appending SVG element to div\n    const svg = d3\n      .select('.barchartdiv')\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height)\n      .attr('class', 'barchart');\n\n    // Format numbers to local (Dutch) format\n    // Sources: https://github.com/d3/d3-format#locale_format & https://observablehq.com/@d3/d3-format\n    const numLocale = d3.formatLocale({\n      decimal: ',',\n      thousands: '.',\n      grouping: [3],\n      currency: ['€', ''],\n    });\n\n    // Format time and dates to local (Dutch) format\n    // Source: https://github.com/d3/d3-time-format#locales\n    const timeLocale = d3.timeFormatLocale({\n      dateTime: '%a %b %e %X %Y',\n      date: '%d/%m/%Y',\n      time: '%H:%M:%S',\n      periods: ['AM', 'PM'],\n      days: [\n        'zondag',\n        'maandag',\n        'dinsdag',\n        'woensdag',\n        'donderdag',\n        'vrijdag',\n        'zaterdag',\n      ],\n      shortDays: ['zo', 'ma', 'di', 'wo', 'do', 'vr', 'za'],\n      months: [\n        'januari',\n        'februari',\n        'maart',\n        'april',\n        'mei',\n        'juni',\n        'juli',\n        'augustus',\n        'september',\n        'oktober',\n        'november',\n        'december',\n      ],\n      shortMonths: [\n        'jan',\n        'feb',\n        'maa',\n        'apr',\n        'mei',\n        'jun',\n        'jul',\n        'aug',\n        'sep',\n        'okt',\n        'nov',\n        'dec',\n      ],\n    });\n\n    // Function used to format numbers to rounded \"local\" number\n    const formatNumber = numLocale.format(',d');\n\n    //   console.log(formatNumber)\n\n    // Function used to format numbers to dd-mmmm-yyyy format (eg. 4 november 2020)\n    // %e instead of %d to get \"4\" instead of \"04\". Source: https://github.com/d3/d3-time-format#locale_format\n    const formatDate = timeLocale.utcFormat('%e %B %Y');\n\n    // Function used to generate a €-sign with \"local\" rounded number\n    function euroFormat(d) {\n      return '€' + numLocale.format(',d')(d);\n    }\n\n    // Setting X & Y scales\n    const x = d3.scaleLinear([0, 1], [margin.left, width - margin.right]);\n    const y = d3\n      .scaleBand()\n      .domain(d3.range(n + 1))\n      .rangeRound([margin.top, margin.top + barSize * (n + 1 + 0.1)])\n      .padding(0.1);\n\n    // Create a ranking for all political parties per day\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\n    function rank(value) {\n      const data = Array.from(partijen, (partij) => ({\n        partij,\n        midden: value(partij),\n      }));\n      data.sort((a, b) => d3.descending(a.midden, b.midden));\n      for (let i = 0; i < data.length; ++i) data[i].ranking = Math.min(n, i);\n      return data;\n    }\n\n    // console.log(rank((name) => datevalues[0][1].get(name)));\n\n    // Creating keyframes: frames (per day) that display the ranking and spendings of political parties\n    // Used for animating between values\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\n    const keyframes = [];\n    let ka, a, kb, b;\n    for ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\n      for (let i = 0; i <= k; ++i) {\n        const t = i / k;\n        keyframes.push([\n          new Date(ka * (1 - t) + kb * t),\n          rank(\n            (partij) => (a.get(partij) || 0) * (1 - t) + (b.get(partij) || 0) * t\n          ),\n        ]);\n      }\n    }\n\n    // Keyframes per political party name + previous and next frames for al parties\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\n    const nameframes = d3.groups(\n      keyframes.flatMap(([, data]) => data),\n      (d) => d.partij\n    );\n    const prev = new Map(\n      nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a]))\n    );\n    const next = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)));\n\n    //    // Appending a start/stop button, used for pausing and (re)-starting the animation\n    //     // Adapted from: https://medium.com/@tarsusi/make-your-own-custom-bar-chart-race-with-d3-js-b7d6cfc4d0bd\n    //     d3.select(\".barchartdiv\")\n    //         .append(\"button\")\n    //             .attr(\"class\", \"controls red button\")\n    //             .text(\"Pauzeer\")\n    //             .on(\"click\", function() {\n    //                 if (this.innerHTML === \"Pauzeer\") {\n    //                     this.innerHTML = \"Hervat\";\n    //                     stop();\n    //                 } else if (this.innerHTML === \"Hervat\") {\n    //                     this.innerHTML = \"Pauzeer\";\n    //                     start();\n    //                 } else {\n    //                     this.innerHTML = \"Pauzeer\";\n    //                     render();\n    //                 }\n    //             });\n\n    // Slider for jumping to a specific date (keyframe), using D3 simple slider plugin\n    // Values between 0 and last keyframe\n    // Sources: https://bl.ocks.org/johnwalley/e1d256b81e51da68f7feb632a53c3518 & https://github.com/johnwalley/d3-simple-slider\n    const sliderFrame = sliderBottom()\n      .min(0)\n      .max(keyframes.length - 1)\n      .width(width - 80)\n      .step(1)\n      .fill('var(--ftm-red)')\n      .handle(d3.symbol().type(d3.symbolCircle).size(250)())\n      .on('start', (val) => {\n        // When clicking somewhere on the slider > render bar chart race with new value\n        render(val);\n      })\n      .on('drag', (val) => {\n        // When dragging slider > stop bar chart race animation, render with new value\n        svg.interrupt();\n        render(val);\n      });\n\n    // Apend a new svg (for the slider) to the main bar chart div\n    const gFrameslider = d3\n      .select('.barchartdiv')\n      .append('svg')\n      .attr('width', width)\n      .attr('height', 20)\n      .attr('class', 'frameslider')\n      .append('g')\n      .attr('transform', 'translate(32,10)');\n\n    gFrameslider.call(sliderFrame);\n\n    // Coverting the date strings to real date objects (unique values), used for the timeline\n    const dataDates = [...new Set(data.map((d) => d.datum))].map(function (d) {\n      return new Date(d);\n    });\n\n    // Coverting the month strings to real date objects (unique values), used for the timeline tick values\n    const dataMonths = [...new Set(data.map((d) => d.maand))].map(function (d) {\n      return new Date(d);\n    });\n\n    // Timeline below the keyframe slider. Used D3 simple slider plugin.\n    // Values are dates (in stead of keyframe numbers that are used with the slider)\n    // Sources: https://bl.ocks.org/johnwalley/e1d256b81e51da68f7feb632a53c3518 & https://github.com/johnwalley/d3-simple-slider\n    const timeline = sliderBottom()\n      .min(d3.min(dataDates))\n      .max(d3.max(dataDates))\n      .width(width - margin.right + 30)\n      .tickFormat(timeLocale.utcFormat('%B'))\n      .tickValues(dataMonths);\n\n    // Append a new svg for the timeline within the main bar chart div.\n    const gTimeline = d3\n      .select('.barchartdiv')\n      .append('svg')\n      .attr('class', 'scaledates')\n      .attr('width', width)\n      .attr('height', 40)\n      .append('g')\n      .attr('transform', 'translate(26.5,17)');\n\n    gTimeline.call(timeline);\n\n    // Create a time scale with d3.scaleTime, used for plotting the circles on the correct dates\n    // Source: https://observablehq.com/@d3/d3-scaletime#scaleUtc\n    const xTime = d3\n      .scaleTime()\n      .domain([keyframes[0][0], keyframes[keyframes.length - 1][0]])\n      .range([0, width - 60]);\n\n    // Append a div to the body, used as a tooltip\n    const div = d3\n      .select('body')\n      .append('div')\n      .attr('class', 'tooltip')\n      .style('opacity', 0);\n\n    if (width > 400) {\n      // Append circles to the timeline group, using the eventData (used for displaying political events)\n      gTimeline\n        .selectAll('eventCircles')\n        .data(eventData)\n        .enter()\n        .append('circle')\n        .attr('cx', function (d) {\n          const cx = xTime(new Date(d.datum));\n          return cx;\n        })\n        .attr('cy', '-3')\n        .attr('r', '10')\n        .attr('fill', (d) => color(d.partij))\n        .style('opacity', 0.8)\n        .on('mouseover', function (event, d) {\n          // On hover, display the tooltip. Source: https://bl.ocks.org/d3noob/180287b6623496dbb5ac4b048813af52\n          d3.select(this).style('opacity', 0.3);\n          div.transition().duration(200).style('opacity', 0.9);\n          div\n            .html(`${d.gebeurtenis}`)\n            .style('left', event.pageX - 20 + 'px')\n            .style('top', event.pageY - 54 + 'px');\n        })\n        .on('mouseout', function () {\n          d3.select(this).style('opacity', 1);\n          div.transition().duration(500).style('opacity', 0);\n        });\n    }\n\n    // Function used to generate the top-axis of the bar chart race, using d3.axisTop\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\n    function axis(svg) {\n      const g = svg.append('g').attr('transform', `translate(0,${margin.top})`);\n\n      const axis = d3\n        .axisTop(x)\n        .tickFormat(euroFormat)\n        .ticks(width / 160)\n        .tickSizeOuter(0)\n        .tickSizeInner(-barSize * (n + y.padding()));\n\n      return (_, transition) => {\n        g.transition(transition).call(axis);\n        g.select('.tick:first-of-type text').remove();\n        g.selectAll('.tick line').attr('stroke', 'white');\n        g.select('.domain').remove();\n      };\n    }\n\n    // Function used to display the date of the current keyframe in the right corner.\n    // Keyframes 0 0 is the first date\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\n    function ticker(svg) {\n      const displayedDate = svg\n        .append('text')\n        .attr('text-anchor', 'end')\n        .attr('x', width - 100)\n        .attr('y', margin.top + barSize * (n + 1))\n        .attr('dy', '0.32em')\n        .style('font-size', '2em')\n        .text(formatDate(keyframes[0][0]));\n\n      return ([date], transition) => {\n        transition\n          .end()\n          .then(() => displayedDate.text(formatDate(date)))\n          .catch(() => {});\n      };\n    }\n\n    // Function used to return the correct color for a political party\n    function color(party) {\n      let color = '';\n      switch (party) {\n        case 'D66':\n          color = '#b2df8a';\n          break;\n        case 'Forum voor Democratie':\n        case 'FvD':\n        case 'Thierry Baudet':\n          color = '#9c1616';\n          break;\n        case 'VVD':\n        case 'Klaas Dijkhoff':\n        case 'Silvio Erkens':\n          color = '#FA9600';\n          break;\n        case 'GroenLinks':\n        case 'Bas Eickhout':\n        case 'Jesse Klaver':  \n          color = '#45b825';\n          break;\n        case 'CDA':\n        case 'Agnes Mulder':\n        case 'Chris van Dam':\n        case  'Harmen Krul':\n        case 'Harry van der Molen':\n        case 'Henri Bontenbal':\n        case 'Jaco Geurts':\n        case 'Lucille Werner':\n        case  'Martijn van Helvert':\n        case 'Mustafa Amhaouch':\n        case 'Raymond Knops':\n        case 'René Peters':\n        case 'Wopke Hoekstra':\n          color = '#428a69';\n          break;\n        case 'PvdA':\n          color = '#fb9a99';\n          break;\n        case 'SP':\n        case 'Lilian Marijnissen':\n          color = '#DD3230';\n          break;\n        case 'PvdD':\n          color = '#b15928';\n          break;\n        case 'SGP':\n          color = '#f0f026';\n          break;\n        case 'DENK':\n          color = '#53c5c9';\n          break;\n        case 'CU':\n        case 'Christen Unie':\n        case 'ChristenUnie':\n        case 'Gert-Jan Segers':\n          color = '#1f78b4';\n          break;\n        case '50 Plus':\n        case '50Plus':\n          color = '#972dba';\n          break;\n        case 'PVV':\n          color = '#87C6C2';\n          break;\n        case 'Code Oranje':\n          color = '#C85716';\n          break;\n        case 'JA21':\n        case 'Jan Cees Vogelaar':\n          color = '#000080';\n          break;\n        case 'Bij1':\n          color = '#f85080';\n          break;\n        case 'Volt':\n          color = '#291749';\n          break;\n        default:\n          color = 'var(--link-color)';\n          break;\n      }\n      return color;\n    }\n\n    function bars(svg) {\n      let bar = svg.append('g').selectAll('rect');\n\n      return ([, data], transition) =>\n        (bar = bar\n          .data(data.slice(0, n), (d) => d.partij)\n          .join(\n            (enter) =>\n              enter\n                .append('rect')\n                .attr('fill', (d) => color(d.partij))\n                .attr('height', y.bandwidth())\n                .attr('x', margin.left)\n                .attr('y', (d) => y((prev.get(d) || d).ranking))\n                .attr('width', (d) => x((prev.get(d) || d).midden) - x(0)),\n            (update) => update,\n            (exit) =>\n              exit\n                .transition(transition)\n                .remove()\n                .attr('y', (d) => y((next.get(d) || d).ranking))\n                .attr('width', (d) => x((next.get(d) || d).midden) - x(0))\n          )\n          .call((bar) =>\n            bar\n              .transition(transition)\n              .attr('y', (d) => y(d.ranking))\n              .attr('width', (d) => x(d.midden) - x(0))\n          ));\n    }\n\n    // Function used to make text transitions possible > here for the spending per party\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\n    function textTween(a, b) {\n      const i = d3.interpolateNumber(a, b);\n      return function (t) {\n        this.textContent = '€' + formatNumber(i(t));\n      };\n    }\n\n    // Function used to append the labels with party names and spending values.\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\n    function labels(svg) {\n      let label = svg\n        .append('g')\n        .style('font', 'bold 12px var(--ftm-graph)')\n        .style('font-variant-numeric', 'tabular-nums')\n        .attr('text-anchor', 'start')\n        .selectAll('text');\n\n      //remove all the\n      d3.selectAll('.tick').selectAll('line').remove();\n      d3.selectAll('.tick').selectAll('text').remove();\n      d3.selectAll('.slider')\n        .selectAll('.parameter-value')\n        .selectAll('text')\n        .remove();\n\n      return ([, data], transition) =>\n        (label = label\n          .data(data.slice(0, n), (d) => d.partij)\n          .join(\n            (enter) =>\n              enter\n                .append('text')\n                .attr(\n                  'transform',\n                  (d) =>\n                    `translate(${x((prev.get(d) || d).midden)},${y(\n                      (prev.get(d) || d).ranking\n                    )})`\n                )\n                .attr('y', y.bandwidth() / 2)\n                .attr('x', 10)\n                .attr('dy', '-0.25em')\n                .text((d) => d.partij)\n                .call((text) =>\n                  text\n                    .append('tspan')\n                    .attr('fill-opacity', 0.7)\n                    .attr('font-weight', 'normal')\n                    .attr('x', 10)\n                    .attr('dy', '1.15em')\n                ),\n            (update) => update,\n            (exit) =>\n              exit\n                .transition(transition)\n                .remove()\n                .attr(\n                  'transform',\n                  (d) =>\n                    `translate(${x((next.get(d) || d).midden)},${y(\n                      (next.get(d) || d).ranking\n                    )})`\n                )\n                .call((g) =>\n                  g\n                    .select('tspan')\n                    .tween('text', (d) =>\n                      textTween(d.midden, (next.get(d) || d).midden)\n                    )\n                )\n          )\n          .call((bar) =>\n            bar\n              .transition(transition)\n              .attr(\n                'transform',\n                (d) => `translate(${x(d.midden)},${y(d.ranking)})`\n              )\n              .call((g) =>\n                g\n                  .select('tspan')\n                  .tween('text', (d) =>\n                    textTween((prev.get(d) || d).midden, d.midden)\n                  )\n              )\n          ));\n    }\n\n    // start() stop() functions used to start and pause the animation.\n    // CurrentDataSetIndex registers the number of the displayed keyframe.\n    // Adapted from: https://medium.com/@tarsusi/make-your-own-custom-bar-chart-race-with-d3-js-b7d6cfc4d0bd\n    let elapsedTime = duration;\n    //   let currentDataSetIndex = 0;\n\n    //   function stop() {\n    //       console.log(\"STOP\");\n    //       svg.interrupt();\n    //   }\n\n    //   function start() {\n    //       render(currentDataSetIndex);\n    //       console.log(\"START\");\n    //   }\n\n    // Functions that are called to update the parts of the bar chart race.\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\n    const updateBars = bars(svg);\n    const updateAxis = axis(svg);\n    const updateLabels = labels(svg);\n    const updateTicker = ticker(svg);\n\n    // Call the render function to render the bar chart race, starting with the first frame.\n    render(0);\n\n    // Function used to render the bar chart race with a given frame number (default is 0).\n    // Adapted from: https://medium.com/@tarsusi/make-your-own-custom-bar-chart-race-with-d3-js-b7d6cfc4d0bd\n    async function render(index = 0) {\n      //   currentDataSetIndex = index;\n      \n      const transition = svg\n        .transition()\n        .duration(elapsedTime)\n        .ease(d3.easeSinInOut)\n        .on('end', () => {\n          if (index < keyframes.length) {\n            elapsedTime = duration;\n            d3.select('.controls').text('Pauzeer');\n\n            // Render next frame\n            render(index + 1);\n          } else {\n            // If frames ended, give option to replay animation.\n            d3.select('.controls').text('Afspelen');\n          }\n        })\n        .on('interrupt', () => {\n          console.log('INTERRUPTED');\n        });\n\n      // Execute the functions that are used to update the bar chart race.\n      if (index < keyframes.length) {\n        sliderFrame.value(index);\n        x.domain([0, keyframes[index][1][0].midden]);\n        updateTicker(keyframes[index], transition);\n        updateAxis(keyframes[index], transition);\n        updateBars(keyframes[index], transition);\n        updateLabels(keyframes[index], transition);\n      }\n\n      // Wait for the transition to end.\n      // Catch promise error, generated when animation is interrupted.\n      // Source: https://stackoverflow.com/questions/37624322/uncaught-in-promise-undefined-error-when-using-with-location-in-facebook-gra\n      await transition\n        .end()\n        .then(() => {})\n        .catch(() => {});\n    }\n  }, [])\n\n  return <div className=\"barchartdiv\" width=\"100%\"></div>;\n}\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":10,"column":12,"nodeType":"39","endLine":10,"endColumn":48},{"ruleId":"40","severity":1,"message":"41","line":17,"column":9,"nodeType":"42","messageId":"43","endLine":17,"endColumn":20},{"ruleId":"44","severity":1,"message":"45","line":166,"column":13,"nodeType":"46","messageId":"47","endLine":166,"endColumn":82},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"react-hooks/exhaustive-deps","Assignments to the 'data' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-unused-vars","'partijNames' is assigned a value but never used.","Identifier","unusedVar","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'a', 'b'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]