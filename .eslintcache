[{"D:\\school\\FTM\\githubRepos\\barchartRace\\src\\index.js":"1","D:\\school\\FTM\\githubRepos\\barchartRace\\src\\reportWebVitals.js":"2","D:\\school\\FTM\\githubRepos\\barchartRace\\src\\App.js":"3","D:\\school\\FTM\\githubRepos\\barchartRace\\src\\components\\BarchartRace.js":"4","D:\\school\\FTM\\githubRepos\\barchartRace\\src\\helper\\data.js":"5","D:\\school\\FTM\\githubRepos\\barchartRace\\src\\components\\Loading.js":"6"},{"size":500,"mtime":1612986220037,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1612961971304,"results":"9","hashOfConfig":"8"},{"size":810,"mtime":1613041711639,"results":"10","hashOfConfig":"8"},{"size":18943,"mtime":1613041701255,"results":"11","hashOfConfig":"8"},{"size":1390,"mtime":1613041706708,"results":"12","hashOfConfig":"8"},{"size":216,"mtime":1613041946253,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"ei5r8e",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\school\\FTM\\githubRepos\\barchartRace\\src\\index.js",[],["28","29"],"D:\\school\\FTM\\githubRepos\\barchartRace\\src\\reportWebVitals.js",[],"D:\\school\\FTM\\githubRepos\\barchartRace\\src\\App.js",[],"D:\\school\\FTM\\githubRepos\\barchartRace\\src\\components\\BarchartRace.js",["30"],"import * as d3 from \"d3\"\r\nimport {sliderBottom} from \"d3-simple-slider\"\r\n\r\nfunction BarchartRace() {\r\n\r\n    async function createBarChart(){\r\n\r\n        const data = await JSON.parse(localStorage.getItem('data'))\r\n        const eventData = await JSON.parse(localStorage.getItem('eventData'))\r\n        console.log(data)\r\n\r\n              // The data from the \"day dashboard\" maintained by FTM\r\n      let partijen = new Set(data.map(d => d.partij))\r\n      console.log(partijen)\r\n\r\n\r\n      // Unique political party names\r\n      let partijNames = d3.group(data, d => d.partij)\r\n\r\n      console.log(partijNames)\r\n\r\n\r\n    // Spending per unique date per political party\r\n    // d.midden = average cumulative value\r\n    // d.datum = date\r\n    // d.partij = political party name\r\n    const datevalues = Array.from(d3.rollup(data, ([d]) => d.midden, d => d.datum, d => d.partij))\r\n    .map(([date, data]) => [new Date(date), data])\r\n    .sort(([a], [b]) => d3.ascending(a, b));\r\n\r\n    console.log(datevalues)\r\n\r\n    // Display settings\r\n    const width = 750;\r\n    const margin = ({top: 16, right: 80, bottom: 65, left: 5})\r\n    const barSize = 37\r\n\r\n    // Maximum number of bars\r\n    const n = 13\r\n\r\n    // Speed between dates displayed (used for keyframes)\r\n    // The higher the number, the slower the total duration of the animation\r\n    const k = 1\r\n\r\n    // Duration between keyframes (in milliseconds)\r\n    const duration = 350\r\n\r\n    const height = margin.top + barSize * n + margin.bottom\r\n\r\n\r\n        // Format numbers to local (Dutch) format \r\n    // Sources: https://github.com/d3/d3-format#locale_format & https://observablehq.com/@d3/d3-format\r\n    const numLocale = d3.formatLocale({\r\n      \"decimal\": \",\",\r\n      \"thousands\": \".\",\r\n      \"grouping\": [3],\r\n      \"currency\": [\"€\", \"\"]\r\n  })\r\n\r\n  // Format time and dates to local (Dutch) format\r\n  // Source: https://github.com/d3/d3-time-format#locales\r\n  const timeLocale = d3.timeFormatLocale({\r\n      \"dateTime\": \"%a %b %e %X %Y\",\r\n      \"date\": \"%d/%m/%Y\",\r\n      \"time\": \"%H:%M:%S\",\r\n      \"periods\": [\"AM\", \"PM\"],\r\n      \"days\": [\"zondag\", \"maandag\", \"dinsdag\", \"woensdag\", \"donderdag\", \"vrijdag\", \"zaterdag\"],\r\n      \"shortDays\": [\"zo\", \"ma\", \"di\", \"wo\", \"do\", \"vr\", \"za\"],\r\n      \"months\": [\"januari\", \"februari\", \"maart\", \"april\", \"mei\", \"juni\", \"juli\", \"augustus\", \"september\", \"oktober\", \"november\", \"december\"],\r\n      \"shortMonths\": [\"jan\", \"feb\", \"maa\", \"apr\", \"mei\", \"jun\", \"jul\", \"aug\", \"sep\", \"okt\", \"nov\", \"dec\"]\r\n  })\r\n\r\n  // Function used to format numbers to rounded \"local\" number\r\n  const formatNumber = numLocale.format(\",d\")\r\n\r\n  console.log(formatNumber)\r\n\r\n  // Function used to format numbers to dd-mmmm-yyyy format (eg. 4 november 2020)\r\n  // %e instead of %d to get \"4\" instead of \"04\". Source: https://github.com/d3/d3-time-format#locale_format\r\n  const formatDate = timeLocale.utcFormat(\"%e %B %Y\")\r\n\r\n  // Function used to generate a €-sign with \"local\" rounded number\r\n  function euroFormat(d) { return '€' + numLocale.format(\",d\")(d) }\r\n\r\n\r\n      // Appending SVG element to div\r\n      const svg = d3.select(\".barchartdiv\")\r\n      .append(\"svg\")\r\n          .attr(\"width\", width)\r\n          .attr(\"height\", height)\r\n          .attr('class', 'barchart')\r\n\r\n    // Setting X & Y scales\r\n    const x = d3.scaleLinear([0, 1], [margin.left, width - margin.right]);\r\n    const y = d3.scaleBand()\r\n    .domain(d3.range(n + 1))\r\n    .rangeRound([margin.top, margin.top + barSize * (n + 1 + 0.1)])\r\n    .padding(0.1);\r\n\r\n    // Create a ranking for all political parties per day\r\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\r\n    function rank(value) {\r\n      const data = Array.from(partijen, partij => ({partij, midden: value(partij)}));\r\n      data.sort((a, b) => d3.descending(a.midden, b.midden));\r\n      for (let i = 0; i < data.length; ++i) data[i].ranking = Math.min(n, i);\r\n      return data;\r\n  }\r\n\r\n  console.log(rank(name => datevalues[0][1].get(name)))\r\n\r\n\r\n  // Creating keyframes: frames (per day) that display the ranking and spendings of political parties \r\n    // Used for animating between values\r\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\r\n    const keyframes = [];\r\n    let ka, a, kb, b;\r\n    for ([[ka, a], [kb, b]] of d3.pairs(datevalues)) {\r\n        for (let i = 0; i <= k; ++i) {\r\n        const t = i / k;\r\n        keyframes.push([\r\n            new Date(ka * (1 - t) + kb * t),\r\n            rank(partij => (a.get(partij) || 0) * (1 - t) + (b.get(partij) || 0) * t)\r\n          ]);\r\n        }\r\n    }\r\n  console.log(keyframes)\r\n\r\n\r\n    // Keyframes per political party name + previous and next frames for al parties\r\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\r\n    const nameframes = d3.groups(keyframes.flatMap(([, data]) => data), d => d.partij)\r\n    const prev = new Map(nameframes.flatMap(([, data]) => d3.pairs(data, (a, b) => [b, a])))\r\n    const next = new Map(nameframes.flatMap(([, data]) => d3.pairs(data)))\r\n\r\n  console.log(nameframes)\r\n\r\n\r\n\r\n\r\n   // Appending a start/stop button, used for pausing and (re)-starting the animation\r\n    // Adapted from: https://medium.com/@tarsusi/make-your-own-custom-bar-chart-race-with-d3-js-b7d6cfc4d0bd\r\n    d3.select(\".barchartdiv\")\r\n        .append(\"button\")\r\n            .attr(\"class\", \"controls red button\")\r\n            .text(\"Pauzeer\")\r\n            .on(\"click\", function(e) {\r\n              console.log(e)\r\n                if (this.innerHTML === \"Pauzeer\") {\r\n                    this.innerHTML = \"Hervat\";\r\n                    stop();\r\n                } else if (this.innerHTML === \"Hervat\") {\r\n                    this.innerHTML = \"Pauzeer\";\r\n                    start();\r\n                } else {\r\n                    this.innerHTML = \"Pauzeer\";\r\n                    render();\r\n                }\r\n            })\r\n\r\n // Slider for jumping to a specific date (keyframe), using D3 simple slider plugin\r\n    // Values between 0 and last keyframe\r\n    // Sources: https://bl.ocks.org/johnwalley/e1d256b81e51da68f7feb632a53c3518 & https://github.com/johnwalley/d3-simple-slider\r\n    const sliderFrame =\r\n        sliderBottom()\r\n        .min(0)\r\n        .max((keyframes.length) - 1)\r\n        .width(width-margin.right+30)\r\n        .step(1)\r\n        .fill('var(--ftm-red)')\r\n        .handle(\r\n            d3\r\n            .symbol()\r\n            .type(d3.symbolCircle)\r\n            .size(250)()\r\n        )\r\n        .on('start', val => {\r\n            // When clicking somewhere on the slider > render bar chart race with new value\r\n            render(val);\r\n        })\r\n        .on('drag', val => {\r\n            // When dragging slider > stop bar chart race animation, render with new value\r\n            svg.interrupt() \r\n            render(val)\r\n        });\r\n\r\n// Apend a new svg (for the slider) to the main bar chart div\r\nconst gFrameslider = d3\r\n.select('.barchartdiv')\r\n.append('svg')\r\n    .attr('width', width)\r\n    .attr('height', 30)\r\n    .attr('class', 'frameslider')\r\n.append('g')\r\n    .attr('transform', 'translate(32,10)')\r\n\r\ngFrameslider.call(sliderFrame)\r\n\r\n  // Coverting the date strings to real date objects (unique values), used for the timeline\r\n  const dataDates = [...(new Set(data.map(d => d.datum)))].map(function(d) {\r\n    return new Date(d);\r\n})\r\n\r\n// Coverting the month strings to real date objects (unique values), used for the timeline tick values\r\nconst dataMonths = [...(new Set(data.map(d => d.maand)))].map(function(d) {\r\n    return new Date(d);\r\n})\r\n\r\n\r\n  // Timeline below the keyframe slider. Used D3 simple slider plugin.\r\n    // Values are dates (in stead of keyframe numbers that are used with the slider)\r\n    // Sources: https://bl.ocks.org/johnwalley/e1d256b81e51da68f7feb632a53c3518 & https://github.com/johnwalley/d3-simple-slider\r\n    const timeline =\r\n        sliderBottom()\r\n        .min(d3.min(dataDates))\r\n        .max(d3.max(dataDates))\r\n        .width(width-margin.right+30)\r\n        .tickFormat(timeLocale.utcFormat('%B'))\r\n        .tickValues(dataMonths);\r\n    \r\n    // Append a new svg for the timeline within the main bar chart div. \r\n    const gTimeline = d3\r\n        .select('.barchartdiv')\r\n        .append('svg')\r\n            .attr('class', 'scaledates')\r\n            .attr('width', width)\r\n            .attr('height', 55)\r\n        .append('g')\r\n            .attr('transform', 'translate(26.5,17)');\r\n\r\n    gTimeline.call(timeline);\r\n\r\n\r\n    // Create a time scale with d3.scaleTime, used for plotting the circles on the correct dates\r\n    // Source: https://observablehq.com/@d3/d3-scaletime#scaleUtc\r\n    const xTime = d3.scaleTime()\r\n    .domain([keyframes[0][0], keyframes[(keyframes.length) - 1][0]])\r\n    .range([0, width-30]);\r\n    \r\n    // Append a div to the body, used as a tooltip\r\n    const div = d3.select(\"body\").append(\"div\")\t\r\n    .attr(\"class\", \"tooltip\")\t\t\t\t\r\n    .style(\"opacity\", 0);\r\n\r\n    // Append circles to the timeline group, using the eventData (used for displaying political events)\r\n    gTimeline.selectAll(\"eventCircles\")\r\n        .data(eventData)\r\n        .enter()\r\n        .append('circle')\r\n            .attr('cx', function (d) {\r\n                const cx = xTime(new Date(d.datum));\r\n                return cx;\r\n            })\r\n            .attr('cy', \"-3\")\r\n            .attr('r', \"5.5\")\r\n            .attr(\"fill\", d => color(d.partij))\r\n            .style(\"opacity\", 1)\r\n            .on(\"mouseover\", function(event, d) {\r\n            // On hover, display the tooltip. Source: https://bl.ocks.org/d3noob/180287b6623496dbb5ac4b048813af52\r\n            d3.select(this).style(\"opacity\", .3);\t\r\n            div.transition()\t\t\r\n                .duration(200)\t\t\r\n                .style(\"opacity\", .9);\t\t\r\n            div.html(`${d.gebeurtenis}`)\t\r\n                .style(\"left\", (event.pageX - 20) + \"px\")\t\t\r\n                .style(\"top\", (event.pageY + 17) + \"px\");\t\r\n            })\t\t\t\t\t\r\n            .on(\"mouseout\", function() {\r\n                d3.select(this).style(\"opacity\", 1);\t\t\t\r\n                div.transition()\t\t\r\n                    .duration(500)\t\t\r\n                    .style(\"opacity\", 0);\t\r\n            });\r\n\r\n    // Function used to generate the top-axis of the bar chart race, using d3.axisTop\r\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\r\n    function axis(svg) {\r\n      const g = svg.append(\"g\")\r\n          .attr(\"transform\", `translate(0,${margin.top})`);\r\n\r\n      const axis = d3.axisTop(x)\r\n          .tickFormat(euroFormat)\r\n          .ticks(width / 160)\r\n          .tickSizeOuter(0)\r\n          .tickSizeInner(-barSize * (n + y.padding()));\r\n\r\n      return (_, transition) => {\r\n          g.transition(transition).call(axis);\r\n          g.select(\".tick:first-of-type text\").remove();\r\n          g.selectAll(\".tick line\").attr(\"stroke\", \"white\");\r\n          g.select(\".domain\").remove();\r\n      };\r\n  }\r\n\r\n  // Function used to display the date of the current keyframe in the right corner. \r\n  // Keyframes 0 0 is the first date\r\n  // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\r\n  function ticker(svg) {\r\n      const displayedDate = svg.append(\"text\")\r\n          .style(\"font\", `bold 1em var(--ftm-graph)`)\r\n          .style(\"font-variant-numeric\", \"tabular-nums\")\r\n          .attr(\"text-anchor\", \"end\")\r\n          .attr(\"x\", width - 6)\r\n          .attr(\"y\", margin.top + barSize * (n + 1))\r\n          .attr(\"dy\", \"0.32em\")\r\n          .text(formatDate(keyframes[0][0]));\r\n\r\n      return ([date], transition) => {\r\n          transition.end().then(() => displayedDate.text(formatDate(date))).catch(() => {});\r\n      };\r\n  }\r\n\r\n      // Function used to return the correct color for a political party\r\n      function color(party) {\r\n        let color = \"\";\r\n        switch(party) {\r\n            case \"D66\":\r\n                color = \"#B2DF8A\";                \r\n            break;\r\n            case \"Forum voor Democratie\":\r\n            case \"FvD\":\r\n                color = \"#9C1616\";                \r\n            break;\r\n            case \"VVD\":\r\n                color = \"#FA9600\";                \r\n            break;\r\n            case \"GroenLinks\":\r\n                color = \"#43B825\";                \r\n            break;\r\n            case \"CDA\":\r\n                color = \"#438A69\";                \r\n            break;\r\n            case \"PvdA\":\r\n                color = \"#FB9B98\";                \r\n            break;\r\n            case \"SP\":\r\n                color = \"#DC3230\";                \r\n            break;\r\n            case \"PvdD\":\r\n                color = \"#B15929\";                \r\n            break;\r\n            case \"SGP\":\r\n                color = \"#F0F025\";                \r\n            break;\r\n            case \"DENK\":\r\n                color = \"#53C5C9\";                \r\n            break;\r\n            case \"CU\":\r\n            case \"Christen Unie\":\r\n            case \"ChristenUnie\":\r\n                color = \"#1F78B4\";                \r\n            break;\r\n            case \"50 Plus\":\r\n            case \"50Plus\":\r\n                color = \"#972EBA\";                \r\n            break;\r\n            case \"PVV\":\r\n                color = \"#88C6C1\";                \r\n            break;\r\n            default:\r\n                color = \"var(--link-color)\";                \r\n            break;\r\n        }\r\n        return color;\r\n    }\r\n\r\n\r\n  function bars(svg) {\r\n    let bar = svg.append(\"g\")\r\n        .selectAll(\"rect\");\r\n\r\n    return ([, data], transition) => bar = bar\r\n        .data(data.slice(0, n), d => d.partij)\r\n        .join(\r\n        enter => enter.append(\"rect\")\r\n            .attr(\"fill\", d => color(d.partij))\r\n            .attr(\"height\", y.bandwidth())\r\n            .attr(\"x\", x(0))\r\n            .attr(\"y\", d => y((prev.get(d) || d).ranking))\r\n            .attr(\"width\", d => x((prev.get(d) || d).midden) - x(0)),\r\n        update => update,\r\n        exit => exit.transition(transition).remove()\r\n            .attr(\"y\", d => y((next.get(d) || d).ranking))\r\n            .attr(\"width\", d => x((next.get(d) || d).midden) - x(0))\r\n        )\r\n        .call(bar => bar.transition(transition)\r\n        .attr(\"y\", d => y(d.ranking))\r\n        .attr(\"width\", d => x(d.midden) - x(0)))\r\n}\r\n\r\n\r\n    // Function used to make text transitions possible > here for the spending per party\r\n    // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\r\n    function textTween(a, b) {\r\n      const i = d3.interpolateNumber(a, b);\r\n      return function(t) {\r\n          this.textContent = \"€\" + formatNumber(i(t));\r\n      };\r\n  }\r\n\r\n  // Function used to append the labels with party names and spending values. \r\n  // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\r\n  function labels(svg) {\r\n      let label = svg.append(\"g\")\r\n          .style(\"font\", \"bold 12px var(--ftm-graph)\")\r\n          .style(\"font-variant-numeric\", \"tabular-nums\")\r\n          .attr(\"text-anchor\", \"start\")\r\n          .selectAll(\"text\");\r\n\r\n      return ([, data], transition) => label = label\r\n          .data(data.slice(0, n), d => d.partij)\r\n          .join(\r\n          enter => enter.append(\"text\")\r\n              .attr(\"transform\", d => `translate(${x((prev.get(d) || d).midden)},${y((prev.get(d) || d).ranking)})`)\r\n              .attr(\"y\", y.bandwidth() / 2)\r\n              .attr(\"x\", 10)\r\n              .attr(\"dy\", \"-0.25em\")\r\n              .text(d => d.partij)\r\n              .call(text => text.append(\"tspan\")\r\n                  .attr(\"fill-opacity\", 0.7)\r\n                  .attr(\"font-weight\", \"normal\")\r\n                  .attr(\"x\", 10)\r\n                  .attr(\"dy\", \"1.15em\")),\r\n          update => update,\r\n          exit => exit.transition(transition).remove()\r\n              .attr(\"transform\", d => `translate(${x((next.get(d) || d).midden)},${y((next.get(d) || d).ranking)})`)\r\n              .call(g => g.select(\"tspan\").tween(\"text\", d => textTween(d.midden, (next.get(d) || d).midden)))\r\n          )\r\n          .call(bar => bar.transition(transition)\r\n          .attr(\"transform\", d => `translate(${x(d.midden)},${y(d.ranking)})`)\r\n          .call(g => g.select(\"tspan\").tween(\"text\", d => textTween((prev.get(d) || d).midden, d.midden))))\r\n  }\r\n\r\n  // start() stop() functions used to start and pause the animation. \r\n  // CurrentDataSetIndex registers the number of the displayed keyframe. \r\n  // Adapted from: https://medium.com/@tarsusi/make-your-own-custom-bar-chart-race-with-d3-js-b7d6cfc4d0bd\r\n  let elapsedTime = duration;\r\n  let currentDataSetIndex = 0;\r\n\r\n  function stop() {\r\n      console.log(\"STOP\");\r\n      svg.interrupt();\r\n  }\r\n\r\n  function start() {\r\n      render(currentDataSetIndex);\r\n      console.log(\"START\");\r\n  }\r\n\r\n  // Functions that are called to update the parts of the bar chart race.\r\n  // Source barchart race: https://observablehq.com/@d3/bar-chart-race-explained\r\n  const updateBars = bars(svg);\r\n  const updateAxis = axis(svg);\r\n  const updateLabels = labels(svg);\r\n  const updateTicker = ticker(svg);\r\n\r\n  // Call the render function to render the bar chart race, starting with the first frame. \r\n  render(0)\r\n\r\n  // Function used to render the bar chart race with a given frame number (default is 0).\r\n  // Adapted from: https://medium.com/@tarsusi/make-your-own-custom-bar-chart-race-with-d3-js-b7d6cfc4d0bd \r\n  async function render(index = 0) {\r\n\r\n      currentDataSetIndex = index;\r\n\r\n      const transition = svg.transition()\r\n      .duration(elapsedTime)\r\n      .ease(d3.easeSinInOut)\r\n      .on(\"end\", () => {\r\n          if (index < keyframes.length) {\r\n              elapsedTime = duration;\r\n              d3.select(\".controls\").text(\"Pauzeer\");\r\n\r\n              // Render next frame\r\n              render(index + 1);\r\n          } else {\r\n              // If frames ended, give option to replay animation.\r\n              d3.select(\".controls\").text(\"Afspelen\");\r\n          }\r\n      })\r\n      .on(\"interrupt\", () => {\r\n          console.log(\"INTERRUPTED\");\r\n      });\r\n      \r\n      // Execute the functions that are used to update the bar chart race. \r\n      if (index < keyframes.length) { \r\n          sliderFrame.value(index)\r\n          x.domain([0, keyframes[index][1][0].midden]);\r\n          updateTicker(keyframes[index], transition);\r\n          updateAxis(keyframes[index], transition);\r\n          updateBars(keyframes[index], transition);\r\n          updateLabels(keyframes[index], transition);\r\n      }\r\n\r\n      // Wait for the transition to end. \r\n      // Catch promise error, generated when animation is interrupted. \r\n      // Source: https://stackoverflow.com/questions/37624322/uncaught-in-promise-undefined-error-when-using-with-location-in-facebook-gra\r\n      await transition.end().then(() => {}).catch(() => {});\r\n  }\r\n\r\n\r\n    }\r\n\r\n    createBarChart()\r\n\r\n\r\n\r\n  \r\n\r\n    return (\r\n      <div className=\"barchartdiv\">\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default BarchartRace;","D:\\school\\FTM\\githubRepos\\barchartRace\\src\\helper\\data.js",[],"D:\\school\\FTM\\githubRepos\\barchartRace\\src\\components\\Loading.js",["31","32"],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":122,"column":18,"nodeType":"39","messageId":"40","endLine":122,"endColumn":85},{"ruleId":"41","severity":1,"message":"42","line":1,"column":17,"nodeType":"43","messageId":"44","endLine":1,"endColumn":26},{"ruleId":"41","severity":1,"message":"45","line":1,"column":28,"nodeType":"43","messageId":"44","endLine":1,"endColumn":36},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'a', 'b'.","ArrowFunctionExpression","unsafeRefs","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]